Q: Write a function to display the tree in order. Return the number of nodes.
D: 0
P: int displayAll(node* root)

Q: Write a function to display the tree in reverse order. Return the number of nodes.
D: 0
P: int displayReverse(node* root)

Q: Write a function to display every node that is divisible by the argument passed in. Return number of nodes displayed.
D: 0
P: int displayDivisible(node* root, int toDisplay)

Q: Write a function to add the data passed in to the function to the tree.
D: 1
P: int insertData(node*& root, int toAdd)

Q: Write a function to remove every node that is divisible by 3 and 5 from the Tree. Return the number of nodes removed
D: 3
P: int removeDivisible(node*& root)

Q: Write a function to display the data in the longest path of the tree.
D: 3
P: int longestPath(node* root)

Q: Write a function to return the average of the longest path in a tree.
D: 4
P: int avgPath(node* root)

Q: Write a function that returns the average of the data contained in the tree
D: 3
P: int avgData(node* root)

Q: Write a function to copy all the nodes that are greater than root into a new tree. Return the number of nodes copied
D: 2
P: int copyGreater(node* srcRoot, node*& destRoot)

Q: Write a function to copy all even nodes from one tree into a new tree. return number of nodes divisible by 7
D: 3
P: int copyDivisible(node* srcRoot, node*& destRoot)

Q: Write a function to remove all the leaves from a tree. return number of nodes removed.
D: 2
P: int prune(node*& root)

Q: Write a function to copy a tree, excluding its' root, into a new tree. return number of nodes copied.
D: 3
P: int copyNoRoot(node* srcRoot, node*& destRoot)

Q: Find and return the most frequently occuring data element in a tree.
D: 4
P: int mode(node* root)

Q: Find print the longest sequential streak contained by a tree.
D: 5
P: void longest_streak(node* root)

Q: find and return the average length of the paths to leaves in a tree.
D: 5
P: float average_length(node* root)

Q: Display the directions taken to the inorder successor.
D: 4
P: void Directions(node* root)

Q: Return the sum of the longest Path divided by the sum of the shortest path to a leaf.
D: 5
P: float longest_over_shortest(node* root)

Q: Return the sum of the sub tree of height three that has the largest sum.
D: 5
P: int max_sub(node* root)
